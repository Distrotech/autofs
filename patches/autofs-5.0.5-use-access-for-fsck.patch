Bottom: 4641b12a0bd4a39b3df8c30216c4a1c3c5b592f5
Top:    6b6b8cca3b149682dbe938756ad02a2bf14be09d
Author: Ian Kent <raven@themaw.net>
Date:   2010-02-16 10:08:01 +0800

autofs-5.0.5 - use access() for fsck


---

diff --git a/modules/mount_ext2.c b/modules/mount_ext2.c
index 26d59d1..13d77b0 100644
--- a/modules/mount_ext2.c
+++ b/modules/mount_ext2.c
@@ -42,6 +42,7 @@ int mount_mount(struct autofs_point *ap, const char *root, const char *name, int
 	int err, ro = 0;
 	const char *fsck_prog;
 	int len, status, existed = 1;
+	pid_t pgrp;
 
 	if (ap->flags & MOUNT_FLAG_REMOUNT)
 		return 0;
@@ -92,6 +93,17 @@ int mount_mount(struct autofs_point *ap, const char *root, const char *name, int
 	if (!strcmp(fstype,"ext4"))
 		fsck_prog = PATH_E4FSCK;
 #endif
+
+	/*
+	 * Maybe the path contains a dependent mount so trigger the recursive
+	 * mount by using access(2) with a different process group id. Ignore
+	 * the access(2) return code iand let the subsequent fsck deal with
+	 * any actual access problems.
+	 */
+	pgrp = getpgrp();
+	setpgrp();
+	access(what, F_OK);
+
 	if (ro) {
 		debug(ap->logopt,
 		      MODPREFIX "calling %s -n %s", fsck_prog, what);
@@ -102,6 +114,8 @@ int mount_mount(struct autofs_point *ap, const char *root, const char *name, int
 		err = spawnl(ap->logopt, fsck_prog, fsck_prog, "-p", what, NULL);
 	}
 
+	setpgid(0, pgrp);
+
 	/*
 	 * spawnl returns the error code, left shifted by 8 bits.  We are
 	 * interested in the following error bits from the fsck program:
