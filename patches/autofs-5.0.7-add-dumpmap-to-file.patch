Bottom: e9731220dc88a3d073f7178c9a08e98986b6cadd
Top:    8929b138560c2289e7c798a43fb94c56b1602156
Author: Ian Kent <raven@themaw.net>
Date:   2013-07-30 10:03:58 +0800

autofs-5.0.7 - add dumpmap to file

The dumpmaps option doesn't allow maps to be output in <key, value>
pairs suitable for use as a file map.

This could be useful to save current maps as a backup for emergency
use.

If the dumpmaps option is given and there is an argument it is taken
as a comma seperated list of map names to be output. The given names
must match a existing map name and if so, and the map is available, it
is output to a file of that name unless such a file already exists. If
a file of the name of the map already exists then the map is ignored.


---

diff --git a/daemon/automount.c b/daemon/automount.c
index 1d0b64e..bbde805 100644
--- a/daemon/automount.c
+++ b/daemon/automount.c
@@ -1145,6 +1145,28 @@ static unsigned long getnumopt(char *str, char option)
 	return val;
 }
 
+static const char *getstropt(char *str, char option)
+{
+	char *names;
+	char *val;
+
+	if (!str || !*str)
+		return NULL;
+
+	names = str;
+	if (*names == '=')
+		names++;
+
+	val = strdup(names);
+	if (!val) {
+		fprintf(stderr,
+			"%s: option -%c, couldn't allocate storage for argument\n",
+			program, option);
+		exit(1);
+	}
+	return (const char *) val;
+}
+
 static void do_master_cleanup_unlock(void *arg)
 {
 	int status;
@@ -1911,10 +1933,11 @@ int main(int argc, char *argv[])
 	int logpri = -1;
 	unsigned ghost, logging, daemon_check;
 	unsigned dumpmaps, foreground, have_global_options;
+	const char *dumpnames = NULL;
 	time_t timeout;
 	time_t age = time(NULL);
 	struct rlimit rlim;
-	const char *options = "+hp:t:vmdD:fVrO:l:n:CF";
+	const char *options = "+hp:t:vm::dD:fVrO:l:n:CF";
 	static const struct option long_options[] = {
 		{"help", 0, 0, 'h'},
 		{"pid-file", 1, 0, 'p'},
@@ -2008,6 +2031,7 @@ int main(int argc, char *argv[])
 
 		case 'm':
 			dumpmaps = 1;
+			dumpnames = getstropt(optarg, opt);
 			break;
 
 		case 'O':
@@ -2151,7 +2175,7 @@ int main(int argc, char *argv[])
 		master_list->nc = nc;
 
 		lookup_nss_read_master(master_list, 0);
-		master_show_mounts(master_list);
+		master_show_mounts(master_list, dumpnames);
 		exit(0);
 	}
 
diff --git a/include/automount.h b/include/automount.h
index 71787a5..15b1128 100644
--- a/include/automount.h
+++ b/include/automount.h
@@ -643,6 +643,26 @@ static inline FILE *open_fopen_r(const char *path)
 	return f;
 }
 
+static inline FILE *open_fopen_wx(const char *path)
+{
+	FILE *f;
+
+#if defined(O_CLOEXEC) && defined(SOCK_CLOEXEC)
+	if (cloexec_works != -1) {
+		f = fopen(path, "wxe");
+		if (f != NULL) {
+			check_cloexec(fileno(f));
+			return f;
+		}
+	}
+#endif
+	f = fopen(path, "wx");
+	if (f == NULL)
+		return NULL;
+	check_cloexec(fileno(f));
+	return f;
+}
+
 static inline FILE *open_setmntent_r(const char *table)
 {
 	FILE *tab;
diff --git a/include/master.h b/include/master.h
index 824707c..6166976 100644
--- a/include/master.h
+++ b/include/master.h
@@ -112,7 +112,7 @@ int master_submount_list_empty(struct autofs_point *ap);
 int master_notify_submount(struct autofs_point *, const char *path, enum states);
 void master_notify_state_change(struct master *, int);
 int master_mount_mounts(struct master *, time_t, int);
-int master_show_mounts(struct master *);
+int master_show_mounts(struct master *, const char *);
 extern inline unsigned int master_get_logopt(void);
 int master_list_empty(struct master *);
 int master_done(struct master *);
diff --git a/lib/master.c b/lib/master.c
index eca3523..95af1b8 100644
--- a/lib/master.c
+++ b/lib/master.c
@@ -1281,7 +1281,86 @@ static void list_source_instances(struct map_source *source, struct map_source *
 	return;
 }
 
-int master_show_mounts(struct master *master)
+static char *match_map_path(const char *match, const char *maps)
+{
+	char *names;
+	char *map_name;
+	char *this;
+	char *tok, *ptr, *tmp;
+	unsigned int found = 0;
+
+	tmp = strdup(match);
+	if (tmp)
+		names = strdup(maps);
+	if (!tmp || !names) {
+		if (tmp)
+			free(tmp);
+		/* Don't print "not found" message since we haven't looked */
+		found = 1;
+		goto fail;
+	}
+
+	/*if (strchr(tmp, '/'))
+		map_name = basename(tmp);
+	else */
+		map_name = tmp;
+
+	this = NULL;
+	ptr = NULL;
+	tok = strtok_r(names, ",", &ptr);
+	while (tok) {
+		if (strcmp(map_name, tok)) {
+			tok = strtok_r(NULL, ",", &ptr);
+			continue;
+		}
+		found = 1;
+		this = strdup(tok);
+		break;
+	}
+
+	free(tmp);
+	free(names);
+
+	if (!this)
+		goto fail;
+
+	return this;
+
+fail:
+	if (!found)
+		printf("map \"%s\" not found in \"%s\", ignored\n",
+			match, maps);
+	else {
+		printf("failed to allocate working storage,\n");
+		printf("map %s ignored\n", match);
+	}
+
+	return NULL;
+}
+
+static void write_map(char *name, struct mapent *first)
+{
+	struct mapent *me = first;
+	FILE *f;
+
+	f = open_fopen_wx(name);
+	if (!f) {
+		printf("  failed to open output file %s: %s\n",
+			name, strerror(errno));
+		printf("  map file not created.\n");
+		return;
+	}
+
+	do {
+		fprintf(f, "%s\t%s\n", me->key, me->mapent);
+	} while ((me = cache_lookup_next(first->mc, me)));
+
+	fclose(f);
+
+	return;
+}
+
+int master_show_mounts(struct master *master, const char *maps)
 {
 	struct list_head *p, *head;
 
@@ -1311,6 +1390,7 @@ int master_show_mounts(struct master *master)
 		struct autofs_point *ap;
 		time_t now = time(NULL);
 		unsigned int count = 0;
+		char *map_path = NULL;
 		int i;
 
 		this = list_entry(p, struct master_mapent, list);
@@ -1320,6 +1400,14 @@ int master_show_mounts(struct master *master)
 
 		printf("\nMount point: %s\n", ap->path);
 
+		if (maps) {
+			map_path = match_map_path(ap->path, maps);
+			if (!map_path) {
+				printf("\n");
+				continue;
+			}
+		}
+
 		printf("\nsource(s):\n");
 
 		/*
@@ -1336,11 +1424,15 @@ int master_show_mounts(struct master *master)
 			lookup_prune_cache(ap, now);
 		else {
 			printf("  failed to read map\n\n");
+			if (map_name)
+				free(map_name);
 			continue;
 		}
 
 		if (!this->maps) {
 			printf("  no map sources found\n\n");
+			if (map_name)
+				free(map_name);
 			continue;
 		}
 
@@ -1379,10 +1471,18 @@ int master_show_mounts(struct master *master)
 			if (!me)
 				printf("  no keys found in map\n");
 			else {
+				if (map_name) {
+					write_map(source->argv[0], me);
+					goto next;
+				}
+
 				do {
 					printf("  %s | %s\n", me->key, me->mapent);
 				} while ((me = cache_lookup_next(source->mc, me)));
 			}
+next:
+			if (map_name)
+				free(map_path);
 
 			count++;
