Bottom: af4afd3216b9addcb5809a68e568b3213b6c03a1
Top:    32bf53139fbe620aee0e9a45ffd6b9e46f950459
Author: Ian Kent <raven@themaw.net>
Date:   2013-08-19 09:57:34 +0800

autofs-5.0.7 - allow use of hosts map in maps

At the moment the internal hosts map can only be use as an entry in the
master map but there's no reason (I can think of so far) that it shouldn't
be possible to use it in map entries.


---

diff --git a/lib/parse_subs.c b/lib/parse_subs.c
index 2326838..cc1b4a4 100644
--- a/lib/parse_subs.c
+++ b/lib/parse_subs.c
@@ -35,6 +35,7 @@ static struct types map_type[] = {
 	{ "ldaps", 5 },
 	{ "hesiod", 6 },
 	{ "userdir", 7 },
+	{ "hosts", 5 },
 };
 static unsigned int map_type_count = sizeof(map_type)/sizeof(struct types);
 
diff --git a/modules/mount_autofs.c b/modules/mount_autofs.c
index 8c1e600..02332dd 100644
--- a/modules/mount_autofs.c
+++ b/modules/mount_autofs.c
@@ -178,12 +178,19 @@ int mount_mount(struct autofs_point *ap, const char *root, const char *name,
 
 	argc = 1;
 
-	if (!(info = parse_map_type_info(what))) {
-		error(ap->logopt, MODPREFIX "failed to parse map info");
-		master_free_mapent(entry);
-		return 1;
+	/*
+	 * If a mount of a hosts map is being requested it will come
+	 * ro us via the options. Catch that below when processing the
+	 * option and create type info struct then.
+	 */
+	if (what) {
+		if (!(info = parse_map_type_info(what))) {
+			error(ap->logopt, MODPREFIX "failed to parse map info");
+			master_free_mapent(entry);
+			return 1;
+		}
+		argv[0] = info->map;
 	}
-	argv[0] = info->map;
 
 	if (options) {
 		p = options;
@@ -192,11 +199,16 @@ int mount_mount(struct autofs_point *ap, const char *root, const char *name,
 				*p = '\0';
 				p++;
 			}
-			argv[argc++] = p;
+			if (!strncmp(p, "hosts", 5))
+				info = parse_map_type_info("hosts:");
+			else
+				argv[argc++] = p;
 		} while ((p = strchr(p, ',')) != NULL);
 	}
 	argv[argc] = NULL;
 
+	error(LOGOPT_ANY, "info type %s format %s map %s", info->type, info->format, info->map);
+
 	source = master_add_map_source(entry,
 				       info->type, info->format,
 				       time(NULL), argc, argv);
diff --git a/modules/parse_sun.c b/modules/parse_sun.c
index c1fc528..412c9c8 100644
--- a/modules/parse_sun.c
+++ b/modules/parse_sun.c
@@ -695,14 +695,18 @@ static int sun_mount(struct autofs_point *ap, const char *root,
 		rv = mount_nfs->mount_mount(ap, root, mountpoint, strlen(mountpoint),
 					    what, fstype, options, mount_nfs->context);
 	} else {
-		what = alloca(loclen + 1);
-		if (*loc == ':') {
-			loclen--;
-			memcpy(what, loc + 1, loclen);
-			what[loclen] = '\0';
-		} else {
-			memcpy(what, loc, loclen);
-			what[loclen] = '\0';
+		if (!loclen)
+			what = NULL;
+		else {
+			what = alloca(loclen + 1);
+			if (*loc == ':') {
+				loclen--;
+				memcpy(what, loc + 1, loclen);
+				what[loclen] = '\0';
+			} else {
+				memcpy(what, loc, loclen);
+				what[loclen] = '\0';
+			}
 		}
 
 		debug(ap->logopt, MODPREFIX
@@ -1433,8 +1437,11 @@ int parse_mount(struct autofs_point *ap, const char *name,
 			p += l;
 			p = skipspace(p);
 
+			error(LOGOPT_ANY, "options %s", options);
+
 			l = parse_mapent(p, options, &myoptions, &loc, ap->logopt);
-			if (!l) {
+			if (!(strstr(myoptions, "fstype=autofs") &&
+			     strstr(myoptions, "hosts")) || !l) {
 				cache_delete_offset_list(mc, name);
 				cache_multi_unlock(me);
 				cache_unlock(mc);
@@ -1592,13 +1599,20 @@ int parse_mount(struct autofs_point *ap, const char *name,
 			p = skipspace(p);
 		}
 
-		loclen = strlen(loc);
-		if (loclen == 0) {
-			free(loc);
-			free(options);
-			error(ap->logopt,
-			      MODPREFIX "entry %s is empty!", name);
-			return 1;
+		/* if it's not a hosts map loc must be non-null */
+		if ((strstr(options, "fstype=autofs") &&
+		      strstr(options, "hosts"))) {
+			loc = NULL;
+			loclen = 0;
+		} else {
+			loclen = strlen(loc);
+			if (loclen == 0) {
+				free(loc);
+				free(options);
+				error(ap->logopt,
+				      MODPREFIX "entry %s is empty!", name);
+				return 1;
+			}
 		}
 
 		debug(ap->logopt,
