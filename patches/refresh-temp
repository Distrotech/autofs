Bottom: 198601b1f069cb91cb813b25b102616d84ecf546
Top:    26559693e0612a98507be5460c42fe776b9fcdaf
Author: Ian Kent <raven@themaw.net>
Date:   2013-07-31 18:48:53 +0800

Refresh of debug.patch

---

diff --git a/daemon/automount.c b/daemon/automount.c
index 20db8af..8bcc81e 100644
--- a/daemon/automount.c
+++ b/daemon/automount.c
@@ -2142,8 +2142,6 @@ int main(int argc, char *argv[])
 				master = argv[2];
 		}
 
-		printf("type %s name %s master %s\n", type, name, master);
-
 		if (master)
 			master_list = master_new(NULL, timeout, ghost);
 		else
@@ -2166,10 +2164,9 @@ int main(int argc, char *argv[])
 		master_list->nc = nc;
 
 		lookup_nss_read_master(master_list, 0);
-		if (type) {
-			printf("call dump_map");
+		if (type)
 			dump_map(master_list, type, name);
-		} else
+		else
 			master_show_mounts(master_list);
 
 		head = &master_list->mounts;
diff --git a/lib/master.c b/lib/master.c
index 81d8e50..bf5296c 100644
--- a/lib/master.c
+++ b/lib/master.c
@@ -1332,15 +1332,8 @@ static void print_map_info(struct map_source *source)
 static int match_map_name(struct map_source *source, const char *name)
 {
 	int argc = source->argc;
-	int i;
 	int ret = 0;
-
-	if (!map) {
-		printf("failed to allocate working storage: %s\n", strerror(errno));
-		return 0;
-	}
-
-	match = basename(map);
+	int i;
 
 	/*
 	 * This can't work for old style "multi" type sources since
@@ -1350,7 +1343,6 @@ static int match_map_name(struct map_source *source, const char *name)
 	 * multi map if one of its map names matches.
 	 */
 	for (i = 0; i < argc; i++) {
-		printf("i %d source->argv[%d] %s\n", i, i, source->argv[i]);
 		if (i == 0 || !strcmp(source->argv[i], "--")) {
 			if (i != 0) {
 				i++;
@@ -1358,7 +1350,6 @@ static int match_map_name(struct map_source *source, const char *name)
 					break;
 			}
 
-			printf("source->argv[%d] %s name %s\n", i, source->argv[i], name);
 			if (source->argv[i] && *source->argv[i] != '-') {
 				char *map = strdup(source->argv[i]);
 				if (!map) {
@@ -1367,7 +1358,6 @@ static int match_map_name(struct map_source *source, const char *name)
 					break;
 				}
 				if (!strcmp(basename(map), name)) {
-					printf("match\n");
 					ret = 1;
 					free(map);
 					break;
@@ -1402,8 +1392,6 @@ int dump_map(struct master *master, const char *type, const char *name)
 
 		ap = this->ap;
 
-		printf("ap->path %s\n", ap->path);
-
 		/*
 		 * Ensure we actually read indirect map entries so we can
 		 * list them. The map reads won't read any indirect map
@@ -1435,7 +1423,6 @@ int dump_map(struct master *master, const char *type, const char *name)
 
 			instance = NULL;
 			if (source->type) {
-				printf("source->type %s\n", source->type);
 				if (strcmp(source->type, type)) {
 					source = source->next;
 					continue;
@@ -1453,7 +1440,6 @@ int dump_map(struct master *master, const char *type, const char *name)
 
 				map = source->instance;
 				while (map) {
-					printf("map->type %s\n", map->type);
 					if (strcmp(map->type, type)) {
 						map = map->next;
 						continue;
@@ -1469,8 +1455,6 @@ int dump_map(struct master *master, const char *type, const char *name)
 				}
 			}
 
-			printf("instance %p\n", instance);
-
 			if (!instance) {
 				source = source->next;
 				lookup_close_lookup(ap);
