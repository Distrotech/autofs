Bottom: f91e709d2436c09a357dc294064e803e0caae2f8
Top:    0409c41f5aa9698dea2ab9fde8291d0fad626fd7
Author: Ian Kent <ikent@redhat.com>
Date:   2013-04-04 14:28:52 +0800

Refresh of autofs-5.0.7-syncronize-handle_mounts-shutdown.patch

---

diff --git a/daemon/automount.c b/daemon/automount.c
index 46289f0..9e83913 100644
--- a/daemon/automount.c
+++ b/daemon/automount.c
@@ -1353,6 +1353,7 @@ static void *statemachine(void *arg)
 			master_mutex_lock();
 			while (!list_empty(&master_list->completed)) {
 				master_mutex_unlock();
+				finish_cond_wait();
 				master_mutex_lock();
 			}
 			if (list_empty(&master_list->mounts)) {
@@ -1465,22 +1466,26 @@ void finish_mutex_unlock(void)
 	}
 }
 
+void finish_cond_wait(void)
+{
+	int status = pthread_cond_wait(&fc.cond, &fc.mutex);
+	if (status)
+		fatal(status);
+}
+
 void handle_mounts_done(void)
 {
 	int status, cancel_state;
 
 	pthread_setcancelstate(PTHREAD_CANCEL_DISABLE, &cancel_state);
-	finish_mutex_lock();
 
+	finish_mutex_lock();
 	sdc.busy++;
-
 	/* Poke signal handler */
 	pthread_kill(state_mach_thid, SIGCONT);
-	status = pthread_cond_wait(&sdc.cond, &sdc.mutex);
-	if (status)
-		fatal(status);
-
+	finish_cond_wait();
 	finish_mutex_unlock();
+
 	pthread_setcancelstate(cancel_state, NULL);
 }
 
diff --git a/include/automount.h b/include/automount.h
index 8c2d060..565adad 100644
--- a/include/automount.h
+++ b/include/automount.h
@@ -362,6 +362,7 @@ struct finish_cond {
 extern struct finish_cond fc;
 void finish_mutex_lock(void);
 void finish_mutex_unlock(void);
+void finish_cond_wait(void);
 
 struct master_readmap_cond {
 	pthread_mutex_t mutex;
diff --git a/lib/master.c b/lib/master.c
index c4b15e6..4341003 100644
--- a/lib/master.c
+++ b/lib/master.c
@@ -1401,11 +1401,7 @@ int master_done(struct master *master)
 	int res = 0;
 	int status;
 
-	status = pthread_mutex_lock(&sdc.mutex);
-	if (status) {
-		logerr("failed to lock shutdown condition mutex!");
-		fatal(status);
-	}
+	finish_mutex_lock();
 
 	while (sdc.busy) {
 		head = &master->completed;
@@ -1421,18 +1417,14 @@ int master_done(struct master *master)
 		}
 	}
 
-	status = pthread_cond_broadcast(&sdc);
+	status = pthread_cond_broadcast(&fc);
 	if (status)
 		fatal(status);
 
 	if (sdc.busy)
 		res = 1;
 
-	status = pthread_mutex_unlock(&sdc.mutex);
-	if (status) {
-		logerr("failed to unlock shutdown condition mutex!");
-		fatal(status);
-	}
+	finish_mutex_unlock();
 
 	return res;
 }
