Bottom: 4c3e4eb7ac5341f7f5522c90411c83ed0beebe45
Top:    9886215ea25703240203804e6366c89e4e5f8b48
Author: Ian Kent <raven@themaw.net>
Date:   2013-02-27 14:31:43 +0800

autofs-5.0.7 - document browse option in man page

The "browse" option has remained undocumented for a long time.
Finally add a section for it to auto.master(5) making special
note of the potential performance implications.


---

diff --git a/CHANGELOG b/CHANGELOG
index ff6a74b..6c35cd1 100644
--- a/CHANGELOG
+++ b/CHANGELOG
@@ -36,6 +36,7 @@
 - fix requires in spec file.
 - fix libtirpc build option to require libtirpc-devel if needed.
 - fix systemd unidir in spec file.
+- document browse option in man page.
 
 25/07/2012 autofs-5.0.7
 =======================
diff --git a/man/auto.master.5.in b/man/auto.master.5.in
index bbea43a..c552e56 100644
--- a/man/auto.master.5.in
+++ b/man/auto.master.5.in
@@ -147,6 +147,17 @@ multiple file systems should be mounted (`multimounts'). If this option
 is given, no file system is mounted at all if at least one file system
 can't be mounted.
 .TP
+.I "[no]browse"
+This is an autofs specific option that is a pseudo mount option and
+so is given without a leading dash. Use of the browse option pre-creates
+mount point directories for indirect mount maps so the map keys can be
+seen in a directory listing without being mounted. Use of this option
+can cause performance problem if the indirect map is large so it should
+be used with caution. The internal program default is to enable browse
+mode for indirect mounts but the default installed configuration overrides
+this by setting BROWSE_MODE to "no" because of the potential performance
+problem.
+.TP
 .I "nobind"
 This is an autofs specific option that is a pseudo mount option and
 so is given without a leading dash. It may be used either in the master
diff --git a/modules/lookup_file.c b/modules/lookup_file.c
index a0a6349..40d5734 100644
--- a/modules/lookup_file.c
+++ b/modules/lookup_file.c
@@ -397,8 +397,9 @@ int lookup_read_master(struct master *master, time_t age, void *context)
 	unsigned int path_len, ent_len;
 	int entry, cur_state;
 
+	/* Don't return fail on self include, skip source */
 	if (master->recurse)
-		return NSS_STATUS_UNAVAIL;
+		return NSS_STATUS_SUCCESS;
 
 	if (master->depth > MAX_INCLUDE_DEPTH) {
 		error(logopt, MODPREFIX
@@ -452,11 +453,6 @@ int lookup_read_master(struct master *master, time_t age, void *context)
 				     "failed to read included master map %s",
 				     master->name);
 			}
-			/*
-			 * Plus map include failures don't cause the map
-			 * read to fail.
-			 */
-			master->read_fail = 0;
 			master->depth--;
 			master->recurse = 0;
