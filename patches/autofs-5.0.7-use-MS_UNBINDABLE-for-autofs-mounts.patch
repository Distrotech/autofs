Bottom: 57c49bb54c28ffd41da0b641c52c54a95e397ab5
Top:    1f0d7723fc3e565b562fbe373a2a801c85f2278e
Author: Ian Kent <raven@themaw.net>
Date:   2013-05-02 14:37:41 +0800

autofs-5.0.7 - use MS_UNBINDABLE


---

diff --git a/daemon/direct.c b/daemon/direct.c
index 228a666..38c8543 100644
--- a/daemon/direct.c
+++ b/daemon/direct.c
@@ -420,7 +420,7 @@ int do_mount_autofs_direct(struct autofs_point *ap,
 
 	map_name = me->mc->map->argv[0];
 
-	ret = mount(map_name, me->key, "autofs", MS_MGC_VAL, mp->options);
+	ret = mount(map_name, me->key, "autofs", mountflags, mp->options);
 	if (ret) {
 		crit(ap->logopt, "failed to mount autofs path %s", me->key);
 		goto out_err;
@@ -768,7 +768,7 @@ int mount_autofs_offset(struct autofs_point *ap, struct mapent *me, const char *
 	if (!type || strcmp(ap->entry->maps->type, "hosts"))
 		map_name = me->mc->map->argv[0];
 
-	ret = mount(map_name, mountpoint, "autofs", MS_MGC_VAL, mp->options);
+	ret = mount(map_name, mountpoint, "autofs", mountflags, mp->options);
 	if (ret) {
 		crit(ap->logopt,
 		     "failed to mount offset trigger %s at %s",
diff --git a/daemon/indirect.c b/daemon/indirect.c
index f4476dc..45758ef 100644
--- a/daemon/indirect.c
+++ b/daemon/indirect.c
@@ -146,7 +146,7 @@ static int do_mount_autofs_indirect(struct autofs_point *ap, const char *root)
 	if (!type || strcmp(ap->entry->maps->type, "hosts"))
 		map_name = ap->entry->maps->argv[0];
 
-	ret = mount(map_name, root, "autofs", MS_MGC_VAL, options);
+	ret = mount(map_name, root, "autofs", mountflags, options);
 	if (ret) {
 		crit(ap->logopt,
 		     "failed to mount autofs path %s at %s", ap->path, root);
diff --git a/include/automount.h b/include/automount.h
index e72fa0d..210712d 100644
--- a/include/automount.h
+++ b/include/automount.h
@@ -19,6 +19,7 @@
 #include <unistd.h>
 #include <fcntl.h>
 #include <mntent.h>
+#include <sys/mount.h>
 #include "config.h"
 #include "list.h"
 
@@ -75,6 +76,12 @@ int load_autofs4_module(void);
 #define SMB_SUPER_MAGIC    0x0000517BL
 #define CIFS_MAGIC_NUMBER  0xFF534D42L
 
+#ifndef MS_UNBINDABLE
+#define MS_UNBINDABLE (1 << 17)
+#endif
+
+unsigned long mountflags = MS_UNBINDABLE|MS_MGC_VAL;
+
 /* This sould be enough for at least 20 host aliases */
 #define HOST_ENT_BUF_SIZE	2048
 
diff --git a/lib/mounts.c b/lib/mounts.c
index 550445c..6315201 100644
--- a/lib/mounts.c
+++ b/lib/mounts.c
@@ -102,11 +102,14 @@ unsigned int query_kproto_ver(void)
 		return 0;
 	}
 
-	if (mount("automount", t_dir, "autofs", MS_MGC_VAL, options)) {
-		close(pipefd[0]);
-		close(pipefd[1]);
-		rmdir(t_dir);
-		return 0;
+	if (mount("automount", t_dir, "autofs", mountflags, options)) {
+		mountflags &= ~MS_UNBINDABLE;
+		if (mount("automount", t_dir, "autofs", mountflags, options)) {
+			close(pipefd[0]);
+			close(pipefd[1]);
+			rmdir(t_dir);
+			return 0;
+		}
 	}
 
 	close(pipefd[1]);
