Bottom: 88a0a806d2a7897d56af99a4394e79a88ec94630
Top:    2898bcf1cacb7384188cb1914ad7feb2316b927b
Author: Ian Kent <raven@themaw.net>
Date:   2013-05-20 23:20:36 +0800

autofs-5.0.7 - add host map reload option


---

diff --git a/include/defaults.h b/include/defaults.h
index 871e14b..a541b50 100644
--- a/include/defaults.h
+++ b/include/defaults.h
@@ -28,6 +28,7 @@
 #define DEFAULT_UMOUNT_WAIT		12
 #define DEFAULT_BROWSE_MODE		1
 #define DEFAULT_LOGGING			0
+#define DEFAULT_HOSTS_MAP_RELOAD	0
 
 #define DEFAULT_LDAP_TIMEOUT		-1
 #define DEFAULT_LDAP_NETWORK_TIMEOUT	8
@@ -62,6 +63,7 @@ unsigned int defaults_get_timeout(void);
 unsigned int defaults_get_negative_timeout(void);
 unsigned int defaults_get_browse_mode(void);
 unsigned int defaults_get_logging(void);
+unsigned int defaults_get_hosts_map_reload(void);
 const char *defaults_get_ldap_server(void);
 unsigned int defaults_get_ldap_timeout(void);
 unsigned int defaults_get_ldap_network_timeout(void);
diff --git a/lib/defaults.c b/lib/defaults.c
index ae1162f..3e7ab13 100644
--- a/lib/defaults.c
+++ b/lib/defaults.c
@@ -35,6 +35,7 @@
 #define ENV_NAME_NEGATIVE_TIMEOUT	"NEGATIVE_TIMEOUT"
 #define ENV_NAME_BROWSE_MODE		"BROWSE_MODE"
 #define ENV_NAME_LOGGING		"LOGGING"
+#define ENV_HOSTS_MAP_RELOAD		"HOSTS_MAP_RELOAD"
 
 #define LDAP_URI			"LDAP_URI"
 #define ENV_LDAP_TIMEOUT		"LDAP_TIMEOUT"
@@ -519,6 +520,7 @@ unsigned int defaults_read_config(unsigned int to_syslog)
 		    check_set_config_value(key, ENV_NAME_NEGATIVE_TIMEOUT, value, to_syslog) ||
 		    check_set_config_value(key, ENV_NAME_BROWSE_MODE, value, to_syslog) ||
 		    check_set_config_value(key, ENV_NAME_LOGGING, value, to_syslog) ||
+		    check_set_config_value(key, ENV_HOSTS_MAP_RELOAD, value, to_syslog) ||
 		    check_set_config_value(key, ENV_LDAP_TIMEOUT, value, to_syslog) ||
 		    check_set_config_value(key, ENV_LDAP_NETWORK_TIMEOUT, value, to_syslog) ||
 		    check_set_config_value(key, ENV_NAME_MAP_OBJ_CLASS, value, to_syslog) ||
@@ -629,6 +631,17 @@ unsigned int defaults_get_logging(void)
 	return logging;
 }
 
+unsigned int defaults_get_hosts_map_reload(void)
+{
+	int res;
+
+	res = get_env_yesno(ENV_HOSTS_MAP_RELOAD);
+	if (res < 0)
+		res = DEFAULT_HOSTS_MAP_RELOAD;
+
+	return res;
+}
+
 unsigned int defaults_get_ldap_timeout(void)
 {
 	int res;
diff --git a/man/auto.master.5.in b/man/auto.master.5.in
index 7907ffa..58bd510 100644
--- a/man/auto.master.5.in
+++ b/man/auto.master.5.in
@@ -253,7 +253,10 @@ which corresponds to a hostname will allow access to the exports of that
 host. The hosts map cannot be dynamically updated and requires a HUP signal
 to be sent to the daemon for it to check hosts for an update. Due to possible
 hierarchic dependencies within a mount tree, it might not be completely
-updated during the HUP signal processing.
+updated during the HUP signal processing. It is also possible that dependencies
+can cause the hosts map to become inoperable so a configuration entry,
+HOSTS_MAP_RELOAD, determines whether to the map is refreshed upon receiving the
+signal. The default is, "no".
 .P
 For example, with an entry in the master map of
 .nh
diff --git a/modules/lookup_hosts.c b/modules/lookup_hosts.c
index 8a8a34d..d00867b 100644
--- a/modules/lookup_hosts.c
+++ b/modules/lookup_hosts.c
@@ -229,6 +229,7 @@ cont:
 int lookup_read_map(struct autofs_point *ap, time_t age, void *context)
 {
 	struct lookup_context *ctxt = (struct lookup_context *) context;
+	unsigned int hosts_map_reload = defaults_get_hosts_map_reload();
 	struct map_source *source;
 	struct mapent_cache *mc;
 	struct hostent *host;
@@ -248,6 +249,10 @@ int lookup_read_map(struct autofs_point *ap, time_t age, void *context)
 	 * direct mounts in order to mount the triggers.
 	 */
 	if (!(ap->flags & MOUNT_FLAG_GHOST) && ap->type != LKP_DIRECT) {
+		if (!hosts_map_reload) {
+			debug(ap->logopt, "map read not needed, so not done");
+			return NSS_STATUS_SUCCESS;
+		}
 		debug(ap->logopt, MODPREFIX
 		      "map not browsable, update existing host entries only");
 		update_hosts_mounts(ap, source, age, ctxt);
@@ -275,7 +280,8 @@ int lookup_read_map(struct autofs_point *ap, time_t age, void *context)
 	if (status)
 		error(ap->logopt, MODPREFIX "failed to unlock hostent mutex");
 
-	update_hosts_mounts(ap, source, age, ctxt);
+	if (hosts_map_reload)
+		update_hosts_mounts(ap, source, age, ctxt);
 	source->age = age;
 
 	return NSS_STATUS_SUCCESS;
diff --git a/redhat/autofs.sysconfig.in b/redhat/autofs.sysconfig.in
index a8992c4..3d481e7 100644
--- a/redhat/autofs.sysconfig.in
+++ b/redhat/autofs.sysconfig.in
@@ -48,6 +48,15 @@ MOUNT_NFS_DEFAULT_PROTOCOL=4
 #
 #LOGGING="none"
 #
+# HOSTS_MAP_RELOAD - try and refresh the exports of the internal
+#                    hosts map when a HUP signal is received. Note
+#                    there can easily be unresolvable dependencies
+#                    when changing the exported mount tree on servers
+#                    so this configuration entry is set to "no" by
+#                    default.
+#
+#HOSTS_MAP_RELOAD="no"
+#
 # Define base dn for map dn lookup.
 #
 # Define server URIs
diff --git a/samples/autofs.conf.default.in b/samples/autofs.conf.default.in
index 1da89cf..77a387a 100644
--- a/samples/autofs.conf.default.in
+++ b/samples/autofs.conf.default.in
@@ -47,6 +47,15 @@ BROWSE_MODE="no"
 #
 #LOGGING="none"
 #
+# HOSTS_MAP_RELOAD - try and refresh the exports of the internal
+#                    hosts map when a HUP signal is received. Note
+#                    there can easily be unresolvable dependencies
+#                    when changing the exported mount tree on servers
+#                    so this configuration entry is set to "no" by
+#                    default.
+#
+#HOSTS_MAP_RELOAD="no"
+#
 # Define server URIs
 #
 # LDAP_URI - space seperated list of server uris of the form
