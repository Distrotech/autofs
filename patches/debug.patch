Bottom: 97ece09240c2985316f562a7cf690e9cb3850de7
Top:    6562aca2d162c0ad35853f8c4843fc5d90f988b3
Author: Ian Kent <raven@themaw.net>
Date:   2013-06-07 17:16:46 +0800

debug.patch


---

diff --git a/lib/cache.c b/lib/cache.c
index 1e05a99..a074f23 100644
--- a/lib/cache.c
+++ b/lib/cache.c
@@ -658,8 +658,10 @@ int cache_update_offset(struct mapent_cache *mc, const char *mkey, const char *k
 		return CHE_FAIL;
 
 	me = cache_lookup_distinct(mc, key);
+	if (me)
+		error(logopt, "owner %p owner->key %s me %p me->key %s", owner, owner->key, me, me->key);
 	if (me && me->age == age) {
-		if (me->multi == owner)
+		if (me == owner)
 			return CHE_DUPLICATE;
 	}
 
diff --git a/modules/mount_nfs.c b/modules/mount_nfs.c
index c6400f0..0f3711d 100644
--- a/modules/mount_nfs.c
+++ b/modules/mount_nfs.c
@@ -190,7 +190,7 @@ int mount_mount(struct autofs_point *ap, const char *root, const char *name, int
 	 * to NFSv3 (if it can). If the NFSv4 probe fails then probe as
 	 * normal.
 	 */
-	if (!this->next &&
+	if (!hosts->next &&
 	    mount_default_proto == 4 &&
 	    vers & NFS_VERS_MASK != 0 &&
 	    vers & NFS4_VERS_MASK != 0) {
@@ -225,6 +225,7 @@ dont_probe:
 
 	/* Root offset of multi-mount */
 	len = strlen(root);
+	error(LOGOPT_ANY, "len = %d root %s name %s root[len-1] %c", len, root, name, root[len-1]);
 	if (root[len - 1] == '/') {
 		len = snprintf(fullpath, len, "%s", root);
 	} else if (*name == '/') {
diff --git a/modules/parse_sun.c b/modules/parse_sun.c
index 67ea525..edbfeb0 100644
--- a/modules/parse_sun.c
+++ b/modules/parse_sun.c
@@ -838,6 +838,8 @@ update_offset_entry(struct autofs_point *ap, const char *name,
 	} else
 		strcpy(m_mapent, loc);
 
+	error(LOGOPT_ANY, "name %s m_key %s m_mapent %s", name, m_key, m_mapent);
+
 	ret = cache_update_offset(mc, name, m_key, m_mapent, age);
 	if (ret == CHE_DUPLICATE)
 		warn(ap->logopt, MODPREFIX
@@ -1135,10 +1137,10 @@ static int mount_subtree(struct autofs_point *ap, struct mapent *me,
 			}
 			ro_len = strlen(ro_loc);
 
-			tmp = alloca(mnt_root_len + 1);
+			tmp = alloca(mnt_root_len + 2);
 			strcpy(tmp, mnt_root);
-			tmp[mnt_root_len - 1] = '/';
-			tmp[mnt_root_len] = '\0';
+			tmp[mnt_root_len] = '/';
+			tmp[mnt_root_len + 1] = '\0';
 			root = tmp;
 
 			rv = sun_mount(ap, root, name, namelen, ro_loc, ro_len, myoptions, ctxt);
