Bottom: bfeb325e55235e836eb8323ba9bfaad36857f2c6
Top:    f94c26248d74733b62cff57e63bf84ae958ef7c3
Author: Ian Kent <ikent@redhat.com>
Date:   2013-09-23 16:19:20 +0800

debug.patch


---

diff --git a/aclocal.m4 b/aclocal.m4
index 7c7e405..3e6f223 100644
--- a/aclocal.m4
+++ b/aclocal.m4
@@ -428,7 +428,7 @@ if test "$af_have_libtirpc" = "yes"; then
     TIRPCLIB="-ltirpc"
 fi
 
-AC_CHECK_FUNCS([getrpcbyname])
+AC_CHECK_FUNCS([getrpcbyname getservbyname])
 
 # restore flags
 CFLAGS="$af_check_libtirpc_save_cflags"
diff --git a/configure b/configure
index ee095df..70996ee 100755
--- a/configure
+++ b/configure
@@ -3228,12 +3228,13 @@ $as_echo "#define TIRPC_WORKAROUND 1" >>confdefs.h
     TIRPCLIB="-ltirpc"
 fi
 
-for ac_func in getrpcbyname
+for ac_func in getrpcbyname getservbyname
 do :
-  ac_fn_c_check_func "$LINENO" "getrpcbyname" "ac_cv_func_getrpcbyname"
-if test "x$ac_cv_func_getrpcbyname" = xyes; then :
+  as_ac_var=`$as_echo "ac_cv_func_$ac_func" | $as_tr_sh`
+ac_fn_c_check_func "$LINENO" "$ac_func" "$as_ac_var"
+if eval test \"x\$"$as_ac_var"\" = x"yes"; then :
   cat >>confdefs.h <<_ACEOF
-#define HAVE_GETRPCBYNAME 1
+#define `$as_echo "HAVE_$ac_func" | $as_tr_cpp` 1
 _ACEOF
 
 fi
diff --git a/include/config.h.in b/include/config.h.in
index bf94822..7037b24 100644
--- a/include/config.h.in
+++ b/include/config.h.in
@@ -24,6 +24,9 @@
 /* Define to 1 if you have the `getrpcbyname' function. */
 #undef HAVE_GETRPCBYNAME
 
+/* Define to 1 if you have the `getservbyname' function. */
+#undef HAVE_GETSERVBYNAME
+
 /* Define to 1 if you have the <inttypes.h> header file. */
 #undef HAVE_INTTYPES_H
 
diff --git a/lib/rpc_subs.c b/lib/rpc_subs.c
index a0de199..2139813 100644
--- a/lib/rpc_subs.c
+++ b/lib/rpc_subs.c
@@ -44,21 +44,9 @@
 #endif
 
 #ifdef WITH_LIBTIRPC
-static const char *rpcb_pgmtbl[] = {
-	"rpcbind", "portmap", "portmapper", "sunrpc", NULL,
-};
-static const char *rpcb_netnametbl[] = {
-	"rpcbind", "portmapper", "sunrpc", NULL,
-};
 const rpcprog_t rpcb_prog = RPCBPROG;
 const rpcvers_t rpcb_version = RPCBVERS;
 #else
-static const char *rpcb_pgmtbl[] = {
-	NULL,
-};
-static const char *rpcb_netnametbl[] = {
-	NULL,
-};
 const rpcprog_t rpcb_prog = PMAPPROG;
 const rpcvers_t rpcb_version = PMAPVERS;
 #endif
@@ -280,7 +268,7 @@ static int rpc_do_create_client(struct sockaddr *addr, struct conn_info *info, i
 		in4_raddr->sin_port = htons(info->port);
 		slen = sizeof(struct sockaddr_in);
 		/* Use rpcbind v2 for AF_INET */
-		if (info->program == rpc_prog)
+		if (info->program == rpcb_prog)
 			info->version = PMAPVERS;
 	} else if (addr->sa_family == AF_INET6) {
 		struct sockaddr_in6 *in6_raddr = (struct sockaddr_in6 *) addr;
@@ -338,13 +326,16 @@ static int rpc_do_create_client(struct sockaddr *addr, struct conn_info *info, i
 }
 #endif
 
-#ifdef HAVE_GETRPCBYNAME
+#if defined(HAVE_GETRPCBYNAME) || defined(HAVE_GETSERVBYNAME)
 static pthread_mutex_t rpcb_mutex = PTHREAD_MUTEX_INITIALIZER;
 #endif
 
 static rpcprog_t rpc_getrpcbyname(const rpcprog_t program)
 {
 #ifdef HAVE_GETRPCBYNAME
+	static const char *rpcb_pgmtbl[] = {
+		"rpcbind", "portmap", "portmapper", "sunrpc", NULL,
+	};
 	struct rpcent *entry;
 	unsigned int i;
 
@@ -353,7 +344,7 @@ static rpcprog_t rpc_getrpcbyname(const rpcprog_t program)
 		entry = getrpcbyname(rpcb_pgmtbl[i]);
 		if (entry) {
 			pthread_mutex_unlock(&rpcb_mutex);
-			return (rpcprog_t)entry->r_number;
+			return (rpcprog_t) entry->r_number;
 		}
 	}
 	pthread_mutex_unlock(&rpcb_mutex);
@@ -361,37 +352,25 @@ static rpcprog_t rpc_getrpcbyname(const rpcprog_t program)
 	return program;
 }
 
-static unsigned short rpc_getservbyname(const char *service, const int protocol)
+static unsigned short rpc_getrpcbport(const int proto)
 {
-	const struct addrinfo hints = {
-		.ai_family      = AF_INET,
-		.ai_protocol    = protocol,
-		.ai_flags       = AI_PASSIVE,
+#ifdef HAVE_GETSERVBYNAME
+	static const char *rpcb_netnametbl[] = {
+		"rpcbind", "portmapper", "sunrpc", NULL,
 	};
-	struct addrinfo *result;
-	const struct sockaddr_in *sin;
-	unsigned short port;
-
-	if (getaddrinfo(NULL, service, &hints, &result) != 0)
-		return 0;
-
-	sin = (const struct sockaddr_in *) result->ai_addr;
-	port = sin->sin_port;
-
-	freeaddrinfo(result);
-	return port;
-}
-
-static unsigned short rpc_getrpcbport(const int protocol)
-{
+	struct servent *entry;
 	unsigned int i;
 
+	pthread_mutex_lock(&rpcb_mutex);
 	for (i = 0; rpcb_netnametbl[i] != NULL; i++) {
-		unsigned short port;
-		port = rpc_getservbyname(rpcb_netnametbl[i], protocol);
-		if (port)
-			return port;
+		entry = getservbyname(rpcb_netnametbl[i], proto);
+		if (entry) {
+			pthread_mutex_unlock(&rpcb_mutex);
+			return (unsigned short) entry->s_port;
+		}
 	}
+	pthread_mutex_unlock(&rpcb_mutex);
+#endif
 	return (unsigned short) PMAPPORT;
 }
